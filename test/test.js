// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var log;

  log = function(msg) {
    return console.log(msg);
  };

  describe("Self test", function() {
    return it("is ok", function() {
      return expect(true).toBe(true);
    });
  });

  describe("ModuleManager", function() {
    var FakeModule;
    FakeModule = (function() {
      function FakeModule(name) {
        this.name = name;
      }

      return FakeModule;

    })();
    beforeEach(function() {
      return this.subject = new window.ModuleManager();
    });
    it('#version is 1.0.0', function() {
      return expect(this.subject.version).toEqual('1.0.0');
    });
    it('#name is ModuleManager', function() {
      return expect(this.subject.name).toEqual('ModuleManager');
    });
    it('#_modules array of modules, empty at initialization', function() {
      return expect(this.subject._modules).toEqual([]);
    });
    describe("#add", function() {
      it('add new module', function() {
        var moduleOne;
        moduleOne = new FakeModule("one");
        expect(this.subject._modules.length).toEqual(0);
        this.subject.add(moduleOne);
        return expect(this.subject._modules[0]).toEqual(moduleOne);
      });
      return it('not add module when was added before', function() {
        var moduleOne;
        moduleOne = new FakeModule("one");
        expect(this.subject._modules.length).toEqual(0);
        this.subject.add(moduleOne);
        expect(this.subject._modules.length).toEqual(1);
        expect(this.subject._modules[0]).toEqual(moduleOne);
        this.subject.add(moduleOne);
        return expect(this.subject._modules.length).toEqual(1);
      });
    });
    return describe('#get', function() {
      beforeEach(function() {
        this.subject = new window.ModuleManager();
        this.fakeModule = new FakeModule('one');
        return this.subject._modules.push(this.fakeModule);
      });
      it('return module by name', function() {
        return expect(this.subject.get('one')).toEqual(this.fakeModule);
      });
      return it('return null when module not exists', function() {
        return expect(this.subject.get('two')).toEqual(null);
      });
    });
  });

}).call(this);
